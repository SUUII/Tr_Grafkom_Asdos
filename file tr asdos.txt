#include <windows.h>
#include <stdlib.h>
#include <glut.h>
#include <gl/GL.h>
#include <iostream>
const float PI = 3.14159;
float teta;
int is_depth;
float xrot = 0.0f;
float yrot = 0.0f;
float xdiff = 0.0f;
float ydiff = 0.0f;

bool mouseDown = false;
using namespace std;
void Inisialisasi(void)
{
	glClearColor(0.0, 0.0, 0.0, 1.0);
	glMatrixMode(GL_PROJECTION);
	//glEnable(GL_LIGHTING);
	glEnable(GL_COLOR_MATERIAL);
	glEnable(GL_LIGHT0);
	glEnable(GL_DEPTH_TEST);
	is_depth = 1;
}
void buatsilinder(GLfloat x, GLfloat y, GLfloat radius, GLfloat tinggi) {
	int i;
	int lineAmount = 360; //# of triangles used to draw circle

	//GLfloat radius = 0.8f; //radius
	GLfloat twicePi = 2.0f * PI;
	float sebelumx = 0;
	float sebelumy = 0;
	int cek = 0;
	for (i = 0; i <= lineAmount; i++) {
		glBegin(GL_POLYGON);
		glColor3f(1, 0, 0);
		float hitungx = x + (radius * cos(i * twicePi / lineAmount));
		float hitungy = y + (radius * sin(i * twicePi / lineAmount));
		if (cek != 1) {
			cek = 1;
		}
		else {
			glVertex3f(sebelumx,sebelumy,-tinggi); 
			glVertex3f(sebelumx, sebelumy, tinggi);
		}
		glVertex3f(hitungx, hitungy, tinggi);
		glVertex3f(hitungx, hitungy, -tinggi);
		sebelumx = hitungx;
		sebelumy = hitungy;
		glEnd();
	}
}
void summonkotak() {
	float itung = glutGet(GLenum GLUT_WINDOW_HEIGHT) / 2;
	glBegin(GL_POLYGON);
	glColor3d(0, 1, 0);
	glVertex3f(-50, -2, -25);
	glVertex3f(50, -2, -25);
	glVertex3f(50, -2, 25);
	glVertex3f(-50, -2, 25);
	glEnd();
	glBegin(GL_POLYGON);
	glColor3d(0, 1, 0);
	glVertex3f(-50, 8, -25);
	glVertex3f(50, 8, -25);
	glVertex3f(50, 8, 25);
	glVertex3f(-50, 8, 25);
	glEnd();
	glBegin(GL_POLYGON);
	glColor3d(0, 1, 0);
	glVertex3f(-50, -2, -25);
	glVertex3f(50, -2, -25);
	glVertex3f(50, 8, -25);
	glVertex3f(-50, 8, -25);
	glEnd();
	glBegin(GL_POLYGON);
	glColor3d(0, 1, 0);
	glVertex3f(-50, -2, 25);
	glVertex3f(50, -2, 25);
	glVertex3f(50, 8, 25);
	glVertex3f(-50, 8, 25);
	glEnd();
	glBegin(GL_POLYGON);
	glColor3d(0, 1, 0);
	glVertex3f(-50, -2, 25);
	glVertex3f(-50, 8, 25);
	glVertex3f(-50, 8, -25);
	glVertex3f(-50, -2, -25);
	glEnd();
	glBegin(GL_POLYGON);
	glColor3d(0, 1, 0);
	glVertex3f(50, -2, 25);
	glVertex3f(50, 8, 25);
	glVertex3f(50, 8, -25);
	glVertex3f(50, -2, -25);
	glEnd();
	glFlush();
}

void tangga(int x, int y, int z, int lebar, int tingi,int panjang, int banyak) {
	int lokasix = x;
	int lokasiy = y;
	int lokasiz = z;
	for (int i = 0; i < banyak;i++) {
		glBegin(GL_POLYGON);
		glColor3d(1, 0, 0);
		glVertex3f(lokasix + lebar, lokasiy + tingi, lokasiz+panjang);
		glVertex3f(lokasix + lebar * 2, lokasiy+tingi, lokasiz +panjang );
		glVertex3f(lokasix + lebar * 2,lokasiy+ tingi * 2, lokasiz +panjang);
		glVertex3f(lokasix + lebar, lokasiy + tingi * 2, lokasiz +panjang);
		glEnd();
		glBegin(GL_POLYGON);
		glColor3d(0, 1, 0);
		glVertex3f(lokasix + lebar, lokasiy + tingi * 2, lokasiz+panjang * 2);
		glVertex3f(lokasix + lebar * 2, lokasiy + tingi * 2, lokasiz + panjang * 2);
		glVertex3f(lokasix + lebar * 2, lokasiy + tingi * 2, lokasiz +panjang);
		glVertex3f(lokasix + lebar, lokasiy + tingi * 2, lokasiz +panjang);
		glEnd();
		lokasiz += panjang;
		lokasiy += tingi;
		glFlush();
	}
}

void display()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();
	gluLookAt(0.5, 2.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
	glRotatef(xrot, 1.0f, 0.0f, 0.0f);
	glRotatef(yrot, 0.0f, 1.0f, 0.0f);
	glPushMatrix();
	glScalef(1, 1, 1);
	//glutSolidCube(20.0);
	//glutWireCube(20);
	//glutWireSphere(20, 30,30);
	//glutSolidCone(10,30,30,10);
	//glutWireCone(10,30,30,10);
	//summonkotak();
	//buatsilinder(0,0,5,50);
	tangga(0, 0, 0, 10, 5, 5, 3);
	tangga(20, 0, 0, 10, 5, 5, 3);
	glPopMatrix();
	glFlush();
}

void idle()
{
	if (!mouseDown)
	{
		xrot += 0.3f;
		yrot += 0.4f;
	}
	glutPostRedisplay();
}

void mouse(int button, int state, int x, int y)
{
	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
	{
		mouseDown = true;
		xdiff = x - yrot;
		ydiff = -y + xrot;
	}
	else
		mouseDown = false;
}

void mouseMotion(int x, int y)
{
	if (mouseDown)
	{
		yrot = x - xdiff;
		xrot = y + ydiff;

		glutPostRedisplay();
	}
}

void ukuran(int lebar, int tinggi)
{
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glViewport(0, 0, lebar, tinggi);
	gluPerspective(50.0, lebar / tinggi, 5.0, 500.0);
	glTranslatef(0.0, -5.0, -150.0);
	glMatrixMode(GL_MODELVIEW);
}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(900, 700);
	glutInitWindowPosition(210, 30);
	glutCreateWindow("672016157");
	glutDisplayFunc(display);
	glutReshapeFunc(ukuran);

	glutMouseFunc(mouse);
	glutMotionFunc(mouseMotion);


	//glutIdleFunc(display);
	Inisialisasi();
	glutMainLoop();
	return 0;
}

